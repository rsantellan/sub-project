<?php


namespace App\Entity;

use FOS\UserBundle\Model\User as BaseUser;
use Doctrine\ORM\Mapping as ORM;

/**
 * @ORM\Entity
 * @ORM\Table(name="fos_user")
 */
class User extends BaseUser
{
    /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     * @ORM\ManyToMany(targetEntity="App\Entity\Role")
     * @ORM\JoinTable(name="fos_user_user_roles",
     *      joinColumns={@ORM\JoinColumn(name="user_id", referencedColumnName="id")},
     *      inverseJoinColumns={@ORM\JoinColumn(name="role_id", referencedColumnName="id")}
     * )
     */
    protected $userRoles;

    private $superAdmin;

    private $group;

    /**
     * User constructor.
     */
    public function __construct()
    {
        parent::__construct();
        $this->userRoles = new \Doctrine\Common\Collections\ArrayCollection();

    }

    /**
     * {@inheritdoc}
     */
    public function getRoles()
    {
        $roles =  parent::getRoles(); // TODO: Change the autogenerated stub
        foreach($this->getUserRoles() as $userRole) {
            $roles[] = $userRole->getRole();
        }
        return array_unique($roles);
    }
    /**
     * {@inheritdoc}
     */
    public function hasRole($role)
    {
        return in_array(strtoupper($role), $this->getRoles(), true);
    }

    /**
     * @return \App\Entity\Role[]
     */
    public function getUserRoles()
    {
        return $this->userRoles;
    }

    /**
     * @param mixed $userRoles
     * @return User
     */
    public function setUserRoles($userRoles)
    {
        $this->userRoles = $userRoles;
        return $this;
    }

    /**
     * @return string
     */
    public function showRolesDescriptions()
    {
        return implode(',', $this->getRoles());
    }

    public function isSuperAdmin()
    {
        return parent::isSuperAdmin();
    }


}